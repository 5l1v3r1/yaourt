#!/bin/bash
# Julien MISCHKOWITZ <wain@archlinux.fr>
# Ce programme permet de rechercher les fichiers pacsave et pacnew, de supprimer les fichiers inutiles et d'éditer les différences entre les fichiers.
program_version=0.3.6
DEBUG=1
dbg(){
	! [ $DEBUG ] && return
	echo -e "$*" >> $YAOURTTMPDIR/pacdiffviewer.log
}

merge_files(){
	DIFFOPTS="-abB"
	#diff $DIFFOPTS -u "$1$ORIGEXT" "$1">$PATCHFILE
	echo "$systemfile: diff between $originalversionprevious and $originalversioncurrent"
	diff $DIFFOPTS -u $savedir/$pkgname/$originalversionprevious$systemfile $systemfile
	#sdiff $DIFFOPTS $savedir/$pkgname/$originalversionprevious$systemfile $systemfile
	#if patch --dry-run -sp0 "$1$NEWEXT" <$PATCHFILE >/dev/null; then
			# TODO: can tilde (~) backup files creation be avoided?
			# If not remove this backup files
	#		patch -p0 "$1" <$PATCHFILE
	#	fi



	read


}


#           COMPARER LES VERSIONS ET TROUVER CE QUI EST MERGEABLE
# Pour chaque fichier .pacnew, vérifier qu'on ait la bonne version en sauvegarde
# Pour chaque fichier .pacnew correct, regarder si la version du package installé correspond
# Pour chaque fichier .pacnew correct chercher la version précédente de la sauvegarde
# , regarder si la version du package installé correspond
is_mergeable(){
	systemcurrentfile=$1
	currentversion=`LC_ALL=C pacman -Qo $systemcurrentfile | awk '{print $5"-"$6}'`
	pkgname=`echo $currentversion | sed 's/-[^-]*-[^-]*$//'`
	currentversionfile="$savedir/$pkgname/${currentversion}${systemcurrentfile}"
	unset previousversion
	dbg "Searching in backupfiles for $systemcurrentfile original files for possible merge"
	if [ ! -f "$currentversionfile" ]; then
		dbg "Version actuelle non trouvé ($currentversion). Merge impossible"
		return 1
	fi
	dbg "Searching for previous version of $systemcurrentfile ($currentversion) for possible merge"
	for candidate in `ls "$savedir/$pkgname" | grep -v "$currentversion"`; do
		[ ! -f "$savedir/$pkgname/$candidate${systemcurrentfile}" ] && continue
		#if `is_x_gt_y $currentversion $version`; then
		#	echo "1 current:$currentversion > version:$version"
		#else
		#	echo "1 current:$currentversion < version:$version"
		#	continue
		#fi
		if [ -z "$previousversion" ]; then
			if `is_x_gt_y $currentversion $candidate`; then
				previousversion=$candidate
				dbg "canditate found: $candidate"
			fi
			continue
		fi
		       
		if `is_x_gt_y $candidate $previousversion`; then
			if `is_x_gt_y $currentversion $candidate`; then
				dbg "best canditate than $previousversion found: candidate:$candidate > $previousversion"
				previousversion=$candidate
			fi
		else
			dbg "debug: not better: candidate:$candidate < $previousversion"
			continue
		fi
	done
	if [ ! -z "$previousversion" ]; then
		dbg "La version $previousversion précède $currentversion"
		echo "$systemcurrentfile $pkgname $currentversion $previousversion" >> $tmp_files/mergeable_files
		return 0
	else
		dbg "Aucune version antérieure à $currentversion n'a été trouvée"
		return 1
	fi

}

# Save files marked as backup in packages for later merge
##########################################################
backupfiles(){
##########################################################
	need_root
	local packagelist=`grep -srl --line-regexp --include="files" '%BACKUP%' "$PACMANROOT/local"`
	for file in ${packagelist[@]};do
		package=`echo $file | awk -F "/" '{print $(NF-1)}' `
		pkgname=`echo $package | sed 's/-[^-]*-[^-]*$//'`
		cat $file | sed -e '1,/%BACKUP%/d' -e '/^$/d'| while read line; do
			backupfilepath=`echo $line | awk '{print $1}'`
			if [ ! -f "$savedir/$pkgname/$package/$backupfilepath" ]; then
				backupfiledir=`dirname $backupfilepath`
				#backupfilename=`basename $backupfilepath`
				backupfilemd5=`echo $line | awk '{print $2}'`
				for currentfile in "/$backupfilepath" "/$backupfilepath.pacnew"; do
					#echo "     recherche $currentfile"
					[ ! -f "$currentfile" ] && continue
					#echo "        calcul md5 $currentfile"
					pacnewfilemd5=`md5sum "$currentfile" | awk '{print $1}'`
					if [ "$pacnewfilemd5" = "$backupfilemd5" ]; then
						#echo "-*- creation du dossier $savedir/$package/$backupfiledir"
						mkdir -p "$savedir/$pkgname/$package/$backupfiledir"
			        		echo "  -> copie de $currentfile"
						cp -a "$currentfile" "$savedir/$pkgname/$package/$backupfilepath" || return 1
						break
					fi
		       		done
			fi
		done
	done
	exit
}


##########################################################
SUPPRESS_ORPHANS()
##########################################################
{
# Affichage et suppression des fichiers orphelins
list "-------------------------------------------------------"
[ $FR ] && plain "        Les fichiers suivants sont orphelins:"
[ $FR ] && plain "    (Les paquetages concernés ne sont plus installés)"
[ $EN ] && plain "        Following files are orphans:"
[ $EN ] && plain "    (Packages are no longer installed)"
list "-------------------------------------------------------"
sleep 1
list "$(cat $tmp_files/pacfile.obsolete)"
[ $FR ] && msg "Voulez-vous supprimer ces fichiers devenus inutiles ?"
[ $FR ] && msg " (à confirmer pour chaque fichier) :  o/n [n]"
[ $EN ] && msg "Do you want to remove this obsolete files ?"
[ $EN ] && msg " (to be confirmed for each file) :  y/n [n]"
msg "----------------------------------------------"
promptlight
read -n 1 suppress
echo
if [ "$suppress" = "o" -o "$suppress" = "y" ]
then
	num=0
	while read ligne; do
		num=$(($num+1))
		fichier[$num]=$ligne
	done < $tmp_files/pacfile.obsolete 

	for i in `seq $num`
	do
		file=${fichier[$i]}
		if [ -w $file ]
		then
			[ $FR ] && promptlight "Supprimer le fichier $file ?: o/n [n] ->"
			[ $EN ] && promptlight "Delete file $file ?: y/n [n] ->"
			read -n 1 deletefile 
			echo
			if [ "$deletefile" = "y" -o "$deletefile" = "o" ]; then rm $file; fi
		else
			[ $FR ] && error "${file}: Vous n'avez pas les droits d'écriture"	
			[ $EN ] && error "${file}: You don't have write access"	
		fi
	done 
	sleep 2
fi
}

##########################################################
SEARCH_ORPHANS()
##########################################################
{
# Rechercher les fichiers pacsave/pacnew orphelins
rm $tmp_files/$extension.tmp
cat < $tmp_files/$extension | while true
do
	read ligne
  	if [ "$ligne" = "" ]; then break; fi
	file=`echo $ligne | cut -d " " -f 5`
	if ! [ -f $file ]
	then
		echo $file.$extension >> $tmp_files/pacfile.obsolete
	else
		echo $ligne >> $tmp_files/$extension.tmp
	fi
done 
[ -f "$tmp_files/$extension.tmp" ] && cp $tmp_files/$extension.tmp $tmp_files/$extension
}

##########################################################
CREATE_DB()
##########################################################
{
# Création de la liste des fichiers .pacsave et .pacnew
rm -rf $tmp_files/
#[ $FR ] && msg "Veuillez patienter pendant la recherche..."
#[ $EN ] && msg "Please wait..."
mkdir -p $tmp_files
find /etc/ /opt \( -name "*.pacsave" -o -name "*.pacnew" \) > $tmp_files/pacbase 

#Recherche des fichiers pacsave/pacnew
for extension in "pacsave" "pacnew"; do
	SEARCH_FOR_PACFILES
done
}

##########################################################
SEARCH_FOR_PACFILES()
##########################################################
{
# Recherche des fichiers pacsave/pacnew + tri des résultats par date
for file in `grep ".$extension" $tmp_files/pacbase`; do
	[ $FR ] && echo `date +%s -r $file` "Le "`date +%d/%m/%Y" à "%T -r $file`": "$file>>$tmp_files/$extension.tmp
	[ $EN ] && echo `date +%s -r $file` "The "`date +%m/%d/%Y" at "%T -r $file`": "$file>>$tmp_files/$extension.tmp
done
if [ -f $tmp_files/$extension.tmp ]; then
	sort -r "$tmp_files/$extension.tmp" | cut -d " " -f 2-6 | sed -e s/.$extension//g>$tmp_files/$extension
	nbresultats=`wc -l $tmp_files/$extension.tmp | cut -d " " -f 1`
	if [ "$extension" = "pacsave" ]; then pacsave_num=$nbresultats; fi
	if [ "$extension" = "pacnew" ]; then pacnew_num=$nbresultats; fi
	[ $FR ] && plain "$nbresultats fichiers $extension ont été trouvés"
	[ $EN ] && plain "$nbresultats .$extension files found"
	SEARCH_ORPHANS
else
	nbresultats=0
fi
}

##########################################################
VIEW_DIFF_LIST()
##########################################################
{
# A partir des fichiers pacsave/pacnew trouvés, cherche les fichiers identiques
# affiche les fichiers avec un numéro, et mémorise ces index dans le tableau file[]

# Recherche des fichiers .pacsave/.pacnew non modifiés
num=0
while read ligne; do
	num=$(($num+1))
	fichier[$num]=$ligne
done < $tmp_files/$extension

echo "File to merge             Current Version      Previous Version" > $tmp_files/meargeable_files

for i in `seq $num`; do
	file[$i]=$(echo ${fichier[$i]} | cut -d " " -f 5)
	show_file_line="$i. ${fichier[$i]}[.$extension]"
	#previous_version_for_merge[$i]=`mergeable_with ${file[$i]}`
	if `is_mergeable ${file[$i]}`; then
		#if [ ! -w ${file[$i]} ]; then show_file_line=$(echo $show_file_line" (readonly)"); fi
		[ $FR ] && show_file_line="$show_file_line $COL_RED$COL_BLINK**fusion automatique possible**"
		[ $EN ] && show_file_line="$show_file_line $COL_RED$COL_BLINK**automerge is possible**"
	else
		[ $FR ] && if diff -Bb ${file[$i]} ${file[$i]}.$extension > /dev/null; then show_file_line="$show_file_line **fichiers identiques**";fi
		[ $EN ] && if diff -Bb ${file[$i]} ${file[$i]}.$extension > /dev/null; then show_file_line="$show_file_line **same files**";fi
	fi
	list "$show_file_line"
done 
}

##########################################################
DIFFEDITOR()
##########################################################
{
clear
[ $FR ] && msg  "Quelle action pour ${file[$numero]}[.$extension] ?"
[ $EN ] && msg  "What do you want to do with ${file[$numero]}[.$extension] ?"
[ $FR ] && plain "  1: Voir les différences avec gvim en mode Expert"
[ $EN ] && plain "  1: Show diffs with gvim in expert mode"
[ $FR ] && plain "  2: Voir les différences avec vimdiff (vi en console)"
[ $EN ] && plain "  2: Show diffs with vimdiff (in console)"
[ $FR ] && plain "  3: Voir les différences avec kompare"
[ $EN ] && plain "  3: Show diffs with kompare"
[ $FR ] && plain "  4: Voir les différences avec kdiff3"
[ $EN ] && plain "  4: Show diffs with kdiff3"
[ $FR ] && plain "  5: gvim en mode Facile (pour les allergiques à VI)"
[ $EN ] && plain "  5: gvim in EASY mode"
[ $FR ] && plain "  6: Entrez une commande pour éditer"
[ $EN ] && plain "  6: Enter a command to edit"
[ $FR ] && plain "  S: supprimer le fichier .$extension"
[ $EN ] && plain "  S: suppress .$extension file"
[ $FR ] && plain "  R: remplacer le fichier actuel par le .$extension"
[ $EN ] && plain "  R: replace actual file by .$extension"
if [ -f "$tmp_files/mergeable_files" ]; then
	line=`grep "${file[$numero]}" $tmp_files/mergeable_files`
	if [ ! -z "$line" ]; then 
		systemfile=`echo $line | awk '{print $1}'`
		pkgname=`echo $line | awk '{print $2}'`
		originalversioncurrent=`echo $line | awk '{print $3}'`
		originalversionprevious=`echo $line | awk '{print $4}'`
		mergeable=1 
		[ $FR ] && plain "  ${COL_BLINK}A: Automatiquement fusionner avec le .$extension (utilise un diff entre $originalversionprevious et $originalversioncurrent)"
		[ $EN ] && plain "  ${COL_BLINK}A: Automatically merge with .$extension (use a diff between $originalfilecurrent and $originalfileprevious)"
	else
		mergeable=0 
	fi
fi
[ $FR ] && msg " Tapez ENTER pour revenir au menu précédent"
[ $EN ] && msg " Press ENTER to return to menu"
msg "----------------------------------------------"
promptlight
read -n 1 action
echo
case "$action" in
	a|A) 
	# Auto merge
	if [ "$mergeable" -eq 1 ]; then
       		merge_files
	fi
	DIFFEDITOR;;
	"1" )
	# Voir les différences avec GVIM
	gvim -d ${file[numero]} ${file[numero]}.$extension
	DIFFEDITOR
	;;
	
	"2" )
	# Voir les différences avec VIMDIFF
	vim -d ${file[numero]} ${file[numero]}.$extension
	DIFFEDITOR
	;;
	
	"3" )
	# Voir les différences avec KOMPARE
	kompare -c ${file[numero]} ${file[numero]}.$extension >/dev/null
	DIFFEDITOR
	;;

	"4" )
	# Voir les différences avec KDIFF3
	kdiff3 ${file[numero]} ${file[numero]}.$extension >/dev/null

	DIFFEDITOR
	;;
	
	"5" )
	# Voir les différences avec GVIM
	gvim -dy ${file[numero]} ${file[numero]}.$extension
	DIFFEDITOR
	;;
	
	"6" )
	# Voir les différences avec une commande donnée
	echo
	echo
	[ $FR ] && msg " Entrez le nom du programme à utiliser"
  	[ $FR ] && echo "    (sans ${file[numero]} ${file[numero]}.$extension)"
	[ $EN ] && msg " Enter the name of the program to use"
  	[ $EN ] && echo "    (without ${file[numero]} ${file[numero]}.$extension)"
	msg "----------------------------------------------"
	promptlight
	read commanddiffview
	( $commanddiffview ${file[numero]} ${file[numero]}.$extension )
	wait
	DIFFEDITOR
	;;


	"S" | "s" )
	# Supprimer le fichier .pacsave ou .pacnew
	rm -i ${file[numero]}.$extension
	extension_old=$extension
	CREATE_DB
	extension=$extension_old
	;;
	
	"R" | "r" )
	# Remplacer le fichier actuel par le fichier .pacsave ou .pacnew
	cp ${file[numero]}.$extension ${file[numero]}
	[ $FR ] && msg "Le fichier ${file[numero]} a été remplacé"
	[ $EN ] && msg "${file[numero]} file has been replaced"
	rm -i ${file[numero]}.$extension
	extension_old=$extension
	CREATE_DB
	extension=$extension_old
	;;
esac
}


##########################################################
SHOWHELP()
##########################################################
{
echo "pacdiffviewer $program_version"
echo "ecrit par wain <wain@archlinux.fr>"
echo ""
echo "usage:"
echo "         pacdiffviewer -c, clean:    Supprime tous les fichiers pacsave et pacnew trouvés"
echo "         pacdiffviewer -h, help:     Affiche cette aide"
echo "         pacdiffviewer -v, version:  Affiche le numéro de version"
echo ""
echo "--------------------------------------------------------"
[ $FR ] && echo "La gestion des fichiers de configuration par pacman lors des mises à jour fonctionne de la manière suivante :"
[ $FR ] && echo "Au cours de la mise à jour d'un paquetage, 3 versions des fichiers sont comparés pour décider l'action à réaliser."
[ $FR ] && echo "- original=X, actuel=X, nouveau=X: Les 3 sont identiques. Le nouveau fichier s'installe"
[ $FR ] && echo "- orginial=X, actuel=X, nouveau=Y: Le fichier original n'a pas été modifié par l'utilisateur, le nouveau fichier s'installe."
[ $FR ] && echo "- original=X, actuel=Y, nouveau=X: Les 2 fichiers des paquetages sont identiques mais l'utilisateur a modifié le fichier actuel. Le fichier actuel reste inchangé. Création d'un .pacnew"
[ $FR ] && echo "- original=X, actuel=Y, nouveau=Y: Le nouveau et l'actuel sont identiques. Le nouveau s'installe"
[ $FR ] && echo "- original=X, actuel=Y, nouveau=Z: Les 3 sont différents. Le nouveau est installé et l'ancien sauvegardé dans .pacsave"


[ $EN ] && echo "HANDLING CONFIG FILES"
[ $EN ] && echo "pacman uses the same logic as rpm to determine action against files that are designated to be backed up."
[ $EN ] && echo "During an upgrade, it uses 3 md5 hashes for each backup file to determine the required action: one for the original file installed, one for the new file that's about to be installed, and one for the actual file existing on the filesystem."
[ $EN ] && echo "After comparing these 3 hashes, the follow scenarios can result:"
[ $EN ] && echo "original=X, current=X, new=X: All three files are the same, so we win either way. Install the new file."
[ $EN ] && echo "original=X, current=X, new=Y: The current file is un-altered from the original but the new one is different. Since the user did not ever modify the file, and the new one may contain improvements/bugfixes, we install the new file."
[ $EN ] && echo "original=X, current=Y, new=X: Both package versions contain the exact same file, but the one on the filesystem has been modified since. In this case, we leave the current file in place."
[ $EN ] && echo "original=X, current=Y, new=Y: The new one is identical to the current one. Win win. Install the new file."
[ $EN ] && echo "original=X, current=Y, new=Z: All three files are different, so we install the new file with a .pacnew extension and warn the user, so she can manually move the file into place after making any necessary customizations."
echo "--------------------------------------------------------"
echo "http://wiki.archlinux.fr/doku.php?id=howto:archlinux:gerer_pacsave_pacnew"
exit 0
}


##########################################################
SHOWVERSION()
##########################################################
{
echo "pacdiffviewer $program_version"
echo "Author: Julien MISCHKOWITZ <wain@archlinux.fr>"
exit 0
}

##########################################################
SUPPRESSAUTO()
##########################################################
{
echo
[ $FR ] && msg "Etes-vous sur de vouloir supprimer tous les fichiers suivants ?"
[ $EN ] && msg "Do you want to delete following files ?"
for file in `cat $tmp_files/pacbase`; do
	[ $FR ] && list $file "(créé le "`date +%d/%m/%Y" à "%T -r $file`")"
	[ $EN ] && list $file "(created "`date +%m/%d/%Y" at "%T -r $file`")"
done
[ $FR ] && msg "Oui (à confirmer pour chaque fichier), Tous, Non"
[ $EN ] && msg "Yes (to be confirmed for each file), All, No"
msg "----------------------------------------------"
promptlight
read -n 1 action
echo
case "$action" in

	"O" | "o" | "Y" | "y" )
	# oui/yes demande confirmation
	[ $FR ] && msg "suppression des fichiers un par un"
	[ $EN ] && msg "deleting files one bye one"
	for file in `cat $tmp_files/pacbase`;
	do
		rm -i $file
	done
	;;
	
	"A" | "a" | "T" | "t" )
	# tous/all supprime tout sans confirmation
	[ $FR ] && msg "Suppression de tous les fichiers"
	[ $EN ] && msg "Deleting all files"
	for file in `cat $tmp_files/pacbase`;
	do
		rm $file
	done
	;;

	*)
	[ $FR ] && msg "Annulation"
	[ $EN ] && msg "Cancelled"
	;;
esac

rm -rf $tmp_files/
exit 0
}

need_root(){
if [ "$UID" -ne "0" ]; then
	echo "Requires root user"
	echo
	echo "Login root:"
	echo "   # su"
	echo "   # <root password>"
	echo
	echo "Or add this line to sudoers:"
	echo "`id -un` ALL=NOPASSWD: /usr/bin/pacdiffviewer"
	exit
fi
}


########################################################################
###              MAIN PROGRAM                                        ###
########################################################################
savedir=/var/lib/yaourt/backupfiles

unset FR EN
if echo $LANG | grep -i "fr" >/dev/null; then
	FR=1
else
	EN=1
fi

# Basic init and libs in common with yaourt
source /usr/lib/yaourt/basicfunctions.sh || exit 1 
tmp_files="$YAOURTTMPDIR/pacdiffviewer.$$"



case $1 in
  -h|--help) SHOWHELP;;
  -v|--version) SHOWVERSION;;
  --backup) backupfiles;;
esac

# Initialisation de la liste des fichiers pacsave/pacnew
need_root
dbg `date +%D" "%Hh%Mm%Ss`
CREATE_DB

# Affichage des résultats de la recherche et sortie si pas de résultats
if [[ "$pacsave_num" -eq "0" && "$pacnew_num" -eq "0" ]]; then
	[ $FR ] && msg "pas de fichiers trouvés. fin"
	[ $EN ] && msg "no file found."
	rm -rf $tmp_files/
	exit 0
fi
sleep 1

# Mode suppression automatique et sortie
if [ "$1" = "-c" ]; then SUPPRESSAUTO; fi

# Suppression des fichiers orphelins si nécessaires 
if [ -f "$tmp_files/pacfile.obsolete" ]; then SUPPRESS_ORPHANS; fi

# Recherche des différences sur les pacsave
if [[ "$pacsave_num" -gt "0" ]]
then
	clear
	modif="o"
	extension="pacsave"
	while true; do
		if [ ! -f $tmp_files/pacsave ]; then break; fi
		clear
		list "--------------------------------------------"
		[ $FR ] && plain "              Fichiers .pacsave"
		[ $EN ] && plain "              .pacsave files"
		list "--------------------------------------------"
		[ $FR ] && plain "Vous aviez peut-être personnalisé ces fichiers de configuration,"
		[ $FR ] && plain "mais depuis ils ont été remplacés suite à une mise à jour:"
		[ $EN ] && plain "Maybe you have changed this files, but they have been"
		[ $EN ] && plain "replaced during packages update:"
		VIEW_DIFF_LIST
		[ $FR ] && msg "Tapez le numéro du fichier à modifier ou ENTER pour Annuler"
		[ $EN ] && msg "Enter the number of the file to be modified or press ENTER to cancel"
		msg "----------------------------------------------"
		promptlight
		read numero
		if [ -z $numero ]; then break; fi
		DIFFEDITOR
	done
fi

# Recherche des différences sur les pacnew
if [[ "$pacnew_num" -gt "0" ]]
then
	clear
	modif="o"
	extension="pacnew"
	while true; do
		if [ ! -f $tmp_files/pacnew ]; then break; fi
		clear
		list "--------------------------------------------"
		[ $FR ] && plain "               Fichiers .pacnew"
		[ $EN ] && plain "               .pacnew files"
		list "--------------------------------------------"
		[ $FR ] && plain "De nouvelles versions de ces fichiers de configuration sont disponibles"
		[ $FR ] && plain "Ces fichiers .pacnew contiennent peut-être des améliorations."
		[ $EN ] && plain "New version of these files are available"
		[ $EN ] && plain "These .pacnew files may contain enhancements"
		VIEW_DIFF_LIST
		[ $FR ] && msg "Tapez le numéro du fichier à modifier ou ENTER pour Annuler"
		[ $EN ] && msg "Enter the number of the file to be modified or press ENTER to cancel"
		msg "----------------------------------------------"
		promptlight
		read numero
		if [ -z $numero ]; then break; fi
		DIFFEDITOR
	done
fi

# Fin du programme
#[ $FR ] && plain "Programme terminé"
rm -rf $tmp_files/
exit 0
